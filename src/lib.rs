// Gmsh C API bindings (v4.4.1)
//
// Generated from gmshc.h @ commit d1769d55

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen */

pub const GMSH_API_VERSION: &'static [u8; 4usize] = b"4.4\0";
pub const GMSH_API_VERSION_MAJOR: u32 = 4;
pub const GMSH_API_VERSION_MINOR: u32 = 4;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub fn gmshFree(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn gmshMalloc(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn gmshInitialize(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        readConfigFiles: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshFinalize(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshOpen(fileName: *const ::std::os::raw::c_char, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshMerge(fileName: *const ::std::os::raw::c_char, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshWrite(fileName: *const ::std::os::raw::c_char, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshClear(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshOptionSetNumber(
        name: *const ::std::os::raw::c_char,
        value: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOptionGetNumber(
        name: *const ::std::os::raw::c_char,
        value: *mut f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOptionSetString(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOptionGetString(
        name: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOptionSetColor(
        name: *const ::std::os::raw::c_char,
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOptionGetColor(
        name: *const ::std::os::raw::c_char,
        r: *mut ::std::os::raw::c_int,
        g: *mut ::std::os::raw::c_int,
        b: *mut ::std::os::raw::c_int,
        a: *mut ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelAdd(name: *const ::std::os::raw::c_char, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelRemove(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelList(
        names: *mut *mut *mut ::std::os::raw::c_char,
        names_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelSetCurrent(
        name: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetEntities(
        dimTags: *mut *mut ::std::os::raw::c_int,
        dimTags_n: *mut usize,
        dim: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelSetEntityName(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetEntityName(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetPhysicalGroups(
        dimTags: *mut *mut ::std::os::raw::c_int,
        dimTags_n: *mut usize,
        dim: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetEntitiesForPhysicalGroup(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        tags: *mut *mut ::std::os::raw::c_int,
        tags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetPhysicalGroupsForEntity(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        physicalTags: *mut *mut ::std::os::raw::c_int,
        physicalTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelAddPhysicalGroup(
        dim: ::std::os::raw::c_int,
        tags: *mut ::std::os::raw::c_int,
        tags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelSetPhysicalName(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetPhysicalName(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetBoundary(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        combined: ::std::os::raw::c_int,
        oriented: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetEntitiesInBoundingBox(
        xmin: f64,
        ymin: f64,
        zmin: f64,
        xmax: f64,
        ymax: f64,
        zmax: f64,
        tags: *mut *mut ::std::os::raw::c_int,
        tags_n: *mut usize,
        dim: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetBoundingBox(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        xmin: *mut f64,
        ymin: *mut f64,
        zmin: *mut f64,
        xmax: *mut f64,
        ymax: *mut f64,
        zmax: *mut f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetDimension(ierr: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelAddDiscreteEntity(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        boundary: *mut ::std::os::raw::c_int,
        boundary_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelRemoveEntities(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        recursive: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelRemoveEntityName(
        name: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelRemovePhysicalGroups(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelRemovePhysicalName(
        name: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetType(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        entityType: *mut *mut ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetParent(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        parentDim: *mut ::std::os::raw::c_int,
        parentTag: *mut ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetPartitions(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        partitions: *mut *mut ::std::os::raw::c_int,
        partitions_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetValue(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        parametricCoord: *mut f64,
        parametricCoord_n: usize,
        points: *mut *mut f64,
        points_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetDerivative(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        parametricCoord: *mut f64,
        parametricCoord_n: usize,
        derivatives: *mut *mut f64,
        derivatives_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetCurvature(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        parametricCoord: *mut f64,
        parametricCoord_n: usize,
        curvatures: *mut *mut f64,
        curvatures_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetPrincipalCurvatures(
        tag: ::std::os::raw::c_int,
        parametricCoord: *mut f64,
        parametricCoord_n: usize,
        curvatureMax: *mut *mut f64,
        curvatureMax_n: *mut usize,
        curvatureMin: *mut *mut f64,
        curvatureMin_n: *mut usize,
        directionMax: *mut *mut f64,
        directionMax_n: *mut usize,
        directionMin: *mut *mut f64,
        directionMin_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetNormal(
        tag: ::std::os::raw::c_int,
        parametricCoord: *mut f64,
        parametricCoord_n: usize,
        normals: *mut *mut f64,
        normals_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelSetVisibility(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        value: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetVisibility(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelSetColor(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGetColor(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        r: *mut ::std::os::raw::c_int,
        g: *mut ::std::os::raw::c_int,
        b: *mut ::std::os::raw::c_int,
        a: *mut ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelSetCoordinates(
        tag: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        z: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGenerate(dim: ::std::os::raw::c_int, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshPartition(numPart: ::std::os::raw::c_int, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshUnpartition(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshOptimize(
        method: *const ::std::os::raw::c_char,
        force: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshRecombine(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshRefine(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshSmooth(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshSetOrder(order: ::std::os::raw::c_int, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshGetLastEntityError(
        dimTags: *mut *mut ::std::os::raw::c_int,
        dimTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetLastNodeError(
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshClear(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshGetNodes(
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        coord: *mut *mut f64,
        coord_n: *mut usize,
        parametricCoord: *mut *mut f64,
        parametricCoord_n: *mut usize,
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        includeBoundary: ::std::os::raw::c_int,
        returnParametricCoord: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetNodesByElementType(
        elementType: ::std::os::raw::c_int,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        coord: *mut *mut f64,
        coord_n: *mut usize,
        parametricCoord: *mut *mut f64,
        parametricCoord_n: *mut usize,
        tag: ::std::os::raw::c_int,
        returnParametricCoord: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetNode(
        nodeTag: usize,
        coord: *mut *mut f64,
        coord_n: *mut usize,
        parametricCoord: *mut *mut f64,
        parametricCoord_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshRebuildNodeCache(
        onlyIfNecessary: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetNodesForPhysicalGroup(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        coord: *mut *mut f64,
        coord_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshAddNodes(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        nodeTags: *mut usize,
        nodeTags_n: usize,
        coord: *mut f64,
        coord_n: usize,
        parametricCoord: *mut f64,
        parametricCoord_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshReclassifyNodes(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshRelocateNodes(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetElements(
        elementTypes: *mut *mut ::std::os::raw::c_int,
        elementTypes_n: *mut usize,
        elementTags: *mut *mut *mut usize,
        elementTags_n: *mut *mut usize,
        elementTags_nn: *mut usize,
        nodeTags: *mut *mut *mut usize,
        nodeTags_n: *mut *mut usize,
        nodeTags_nn: *mut usize,
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetElement(
        elementTag: usize,
        elementType: *mut ::std::os::raw::c_int,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetElementByCoordinates(
        x: f64,
        y: f64,
        z: f64,
        elementTag: *mut usize,
        elementType: *mut ::std::os::raw::c_int,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        u: *mut f64,
        v: *mut f64,
        w: *mut f64,
        dim: ::std::os::raw::c_int,
        strict: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetElementTypes(
        elementTypes: *mut *mut ::std::os::raw::c_int,
        elementTypes_n: *mut usize,
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetElementType(
        familyName: *const ::std::os::raw::c_char,
        order: ::std::os::raw::c_int,
        serendip: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelMeshGetElementProperties(
        elementType: ::std::os::raw::c_int,
        elementName: *mut *mut ::std::os::raw::c_char,
        dim: *mut ::std::os::raw::c_int,
        order: *mut ::std::os::raw::c_int,
        numNodes: *mut ::std::os::raw::c_int,
        nodeCoord: *mut *mut f64,
        nodeCoord_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetElementsByType(
        elementType: ::std::os::raw::c_int,
        elementTags: *mut *mut usize,
        elementTags_n: *mut usize,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        tag: ::std::os::raw::c_int,
        task: usize,
        numTasks: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshPreallocateElementsByType(
        elementType: ::std::os::raw::c_int,
        elementTag: ::std::os::raw::c_int,
        nodeTag: ::std::os::raw::c_int,
        elementTags: *mut *mut usize,
        elementTags_n: *mut usize,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshAddElements(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        elementTypes: *mut ::std::os::raw::c_int,
        elementTypes_n: usize,
        elementTags: *mut *const usize,
        elementTags_n: *const usize,
        elementTags_nn: usize,
        nodeTags: *mut *const usize,
        nodeTags_n: *const usize,
        nodeTags_nn: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshAddElementsByType(
        tag: ::std::os::raw::c_int,
        elementType: ::std::os::raw::c_int,
        elementTags: *mut usize,
        elementTags_n: usize,
        nodeTags: *mut usize,
        nodeTags_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetIntegrationPoints(
        elementType: ::std::os::raw::c_int,
        integrationType: *const ::std::os::raw::c_char,
        integrationPoints: *mut *mut f64,
        integrationPoints_n: *mut usize,
        integrationWeights: *mut *mut f64,
        integrationWeights_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetJacobians(
        elementType: ::std::os::raw::c_int,
        integrationPoints: *mut f64,
        integrationPoints_n: usize,
        jacobians: *mut *mut f64,
        jacobians_n: *mut usize,
        determinants: *mut *mut f64,
        determinants_n: *mut usize,
        points: *mut *mut f64,
        points_n: *mut usize,
        tag: ::std::os::raw::c_int,
        task: usize,
        numTasks: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshPreallocateJacobians(
        elementType: ::std::os::raw::c_int,
        numIntegrationPoints: ::std::os::raw::c_int,
        jacobian: ::std::os::raw::c_int,
        determinant: ::std::os::raw::c_int,
        point: ::std::os::raw::c_int,
        jacobians: *mut *mut f64,
        jacobians_n: *mut usize,
        determinants: *mut *mut f64,
        determinants_n: *mut usize,
        points: *mut *mut f64,
        points_n: *mut usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetBasisFunctions(
        elementType: ::std::os::raw::c_int,
        integrationPoints: *mut f64,
        integrationPoints_n: usize,
        functionSpaceType: *const ::std::os::raw::c_char,
        numComponents: *mut ::std::os::raw::c_int,
        basisFunctions: *mut *mut f64,
        basisFunctions_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetBasisFunctionsForElements(
        elementType: ::std::os::raw::c_int,
        integrationPoints: *mut f64,
        integrationPoints_n: usize,
        functionSpaceType: *const ::std::os::raw::c_char,
        numComponents: *mut ::std::os::raw::c_int,
        numFunctionsPerElements: *mut ::std::os::raw::c_int,
        basisFunctions: *mut *mut f64,
        basisFunctions_n: *mut usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetKeysForElements(
        elementType: ::std::os::raw::c_int,
        functionSpaceType: *const ::std::os::raw::c_char,
        keys: *mut *mut ::std::os::raw::c_int,
        keys_n: *mut usize,
        coord: *mut *mut f64,
        coord_n: *mut usize,
        tag: ::std::os::raw::c_int,
        returnCoord: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetInformationForElements(
        keys: *mut ::std::os::raw::c_int,
        keys_n: usize,
        elementType: ::std::os::raw::c_int,
        functionSpaceType: *const ::std::os::raw::c_char,
        infoKeys: *mut *mut ::std::os::raw::c_int,
        infoKeys_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshPrecomputeBasisFunctions(
        elementType: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetBarycenters(
        elementType: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        fast: ::std::os::raw::c_int,
        primary: ::std::os::raw::c_int,
        barycenters: *mut *mut f64,
        barycenters_n: *mut usize,
        task: usize,
        numTasks: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshPreallocateBarycenters(
        elementType: ::std::os::raw::c_int,
        barycenters: *mut *mut f64,
        barycenters_n: *mut usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetElementEdgeNodes(
        elementType: ::std::os::raw::c_int,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        tag: ::std::os::raw::c_int,
        primary: ::std::os::raw::c_int,
        task: usize,
        numTasks: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetElementFaceNodes(
        elementType: ::std::os::raw::c_int,
        faceType: ::std::os::raw::c_int,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        tag: ::std::os::raw::c_int,
        primary: ::std::os::raw::c_int,
        task: usize,
        numTasks: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetGhostElements(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        elementTags: *mut *mut usize,
        elementTags_n: *mut usize,
        partitions: *mut *mut ::std::os::raw::c_int,
        partitions_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshSetSize(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        size: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshSetTransfiniteCurve(
        tag: ::std::os::raw::c_int,
        numNodes: ::std::os::raw::c_int,
        meshType: *const ::std::os::raw::c_char,
        coef: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshSetTransfiniteSurface(
        tag: ::std::os::raw::c_int,
        arrangement: *const ::std::os::raw::c_char,
        cornerTags: *mut ::std::os::raw::c_int,
        cornerTags_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshSetTransfiniteVolume(
        tag: ::std::os::raw::c_int,
        cornerTags: *mut ::std::os::raw::c_int,
        cornerTags_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshSetRecombine(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshSetSmoothing(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        val: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshSetReverse(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        val: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshSetOutwardOrientation(
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshEmbed(
        dim: ::std::os::raw::c_int,
        tags: *mut ::std::os::raw::c_int,
        tags_n: usize,
        inDim: ::std::os::raw::c_int,
        inTag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshRemoveEmbedded(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        dim: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshReorderElements(
        elementType: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ordering: *mut usize,
        ordering_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshRenumberNodes(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshRenumberElements(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshSetPeriodic(
        dim: ::std::os::raw::c_int,
        tags: *mut ::std::os::raw::c_int,
        tags_n: usize,
        tagsMaster: *mut ::std::os::raw::c_int,
        tagsMaster_n: usize,
        affineTransform: *mut f64,
        affineTransform_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshGetPeriodicNodes(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        tagMaster: *mut ::std::os::raw::c_int,
        nodeTags: *mut *mut usize,
        nodeTags_n: *mut usize,
        nodeTagsMaster: *mut *mut usize,
        nodeTagsMaster_n: *mut usize,
        affineTransform: *mut *mut f64,
        affineTransform_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshRemoveDuplicateNodes(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshSplitQuadrangles(
        quality: f64,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshClassifySurfaces(
        angle: f64,
        boundary: ::std::os::raw::c_int,
        forReparametrization: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshCreateGeometry(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshCreateTopology(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshComputeHomology(
        domainTags: *mut ::std::os::raw::c_int,
        domainTags_n: usize,
        subdomainTags: *mut ::std::os::raw::c_int,
        subdomainTags_n: usize,
        dims: *mut ::std::os::raw::c_int,
        dims_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshComputeCohomology(
        domainTags: *mut ::std::os::raw::c_int,
        domainTags_n: usize,
        subdomainTags: *mut ::std::os::raw::c_int,
        subdomainTags_n: usize,
        dims: *mut ::std::os::raw::c_int,
        dims_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshFieldAdd(
        fieldType: *const ::std::os::raw::c_char,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelMeshFieldRemove(tag: ::std::os::raw::c_int, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelMeshFieldSetNumber(
        tag: ::std::os::raw::c_int,
        option: *const ::std::os::raw::c_char,
        value: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshFieldSetString(
        tag: ::std::os::raw::c_int,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshFieldSetNumbers(
        tag: ::std::os::raw::c_int,
        option: *const ::std::os::raw::c_char,
        value: *mut f64,
        value_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshFieldSetAsBackgroundMesh(
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelMeshFieldSetAsBoundaryLayer(
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoAddPoint(
        x: f64,
        y: f64,
        z: f64,
        meshSize: f64,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddLine(
        startTag: ::std::os::raw::c_int,
        endTag: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddCircleArc(
        startTag: ::std::os::raw::c_int,
        centerTag: ::std::os::raw::c_int,
        endTag: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        nx: f64,
        ny: f64,
        nz: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddEllipseArc(
        startTag: ::std::os::raw::c_int,
        centerTag: ::std::os::raw::c_int,
        majorTag: ::std::os::raw::c_int,
        endTag: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        nx: f64,
        ny: f64,
        nz: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddSpline(
        pointTags: *mut ::std::os::raw::c_int,
        pointTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddBSpline(
        pointTags: *mut ::std::os::raw::c_int,
        pointTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddBezier(
        pointTags: *mut ::std::os::raw::c_int,
        pointTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddCurveLoop(
        curveTags: *mut ::std::os::raw::c_int,
        curveTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddPlaneSurface(
        wireTags: *mut ::std::os::raw::c_int,
        wireTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddSurfaceFilling(
        wireTags: *mut ::std::os::raw::c_int,
        wireTags_n: usize,
        tag: ::std::os::raw::c_int,
        sphereCenterTag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddSurfaceLoop(
        surfaceTags: *mut ::std::os::raw::c_int,
        surfaceTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoAddVolume(
        shellTags: *mut ::std::os::raw::c_int,
        shellTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelGeoExtrude(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        dx: f64,
        dy: f64,
        dz: f64,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        numElements: *mut ::std::os::raw::c_int,
        numElements_n: usize,
        heights: *mut f64,
        heights_n: usize,
        recombine: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoRevolve(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        x: f64,
        y: f64,
        z: f64,
        ax: f64,
        ay: f64,
        az: f64,
        angle: f64,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        numElements: *mut ::std::os::raw::c_int,
        numElements_n: usize,
        heights: *mut f64,
        heights_n: usize,
        recombine: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoTwist(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        x: f64,
        y: f64,
        z: f64,
        dx: f64,
        dy: f64,
        dz: f64,
        ax: f64,
        ay: f64,
        az: f64,
        angle: f64,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        numElements: *mut ::std::os::raw::c_int,
        numElements_n: usize,
        heights: *mut f64,
        heights_n: usize,
        recombine: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoTranslate(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        dx: f64,
        dy: f64,
        dz: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoRotate(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        x: f64,
        y: f64,
        z: f64,
        ax: f64,
        ay: f64,
        az: f64,
        angle: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoDilate(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        x: f64,
        y: f64,
        z: f64,
        a: f64,
        b: f64,
        c: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoSymmetrize(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        a: f64,
        b: f64,
        c: f64,
        d: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoCopy(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoRemove(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        recursive: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoRemoveAllDuplicates(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelGeoSynchronize(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelGeoMeshSetSize(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        size: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoMeshSetTransfiniteCurve(
        tag: ::std::os::raw::c_int,
        nPoints: ::std::os::raw::c_int,
        meshType: *const ::std::os::raw::c_char,
        coef: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoMeshSetTransfiniteSurface(
        tag: ::std::os::raw::c_int,
        arrangement: *const ::std::os::raw::c_char,
        cornerTags: *mut ::std::os::raw::c_int,
        cornerTags_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoMeshSetTransfiniteVolume(
        tag: ::std::os::raw::c_int,
        cornerTags: *mut ::std::os::raw::c_int,
        cornerTags_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoMeshSetRecombine(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        angle: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoMeshSetSmoothing(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        val: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelGeoMeshSetReverse(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        val: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccAddPoint(
        x: f64,
        y: f64,
        z: f64,
        meshSize: f64,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddLine(
        startTag: ::std::os::raw::c_int,
        endTag: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddCircleArc(
        startTag: ::std::os::raw::c_int,
        centerTag: ::std::os::raw::c_int,
        endTag: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddCircle(
        x: f64,
        y: f64,
        z: f64,
        r: f64,
        tag: ::std::os::raw::c_int,
        angle1: f64,
        angle2: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddEllipseArc(
        startTag: ::std::os::raw::c_int,
        centerTag: ::std::os::raw::c_int,
        majorTag: ::std::os::raw::c_int,
        endTag: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddEllipse(
        x: f64,
        y: f64,
        z: f64,
        r1: f64,
        r2: f64,
        tag: ::std::os::raw::c_int,
        angle1: f64,
        angle2: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddSpline(
        pointTags: *mut ::std::os::raw::c_int,
        pointTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddBSpline(
        pointTags: *mut ::std::os::raw::c_int,
        pointTags_n: usize,
        tag: ::std::os::raw::c_int,
        degree: ::std::os::raw::c_int,
        weights: *mut f64,
        weights_n: usize,
        knots: *mut f64,
        knots_n: usize,
        multiplicities: *mut ::std::os::raw::c_int,
        multiplicities_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddBezier(
        pointTags: *mut ::std::os::raw::c_int,
        pointTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddWire(
        curveTags: *mut ::std::os::raw::c_int,
        curveTags_n: usize,
        tag: ::std::os::raw::c_int,
        checkClosed: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddCurveLoop(
        curveTags: *mut ::std::os::raw::c_int,
        curveTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddRectangle(
        x: f64,
        y: f64,
        z: f64,
        dx: f64,
        dy: f64,
        tag: ::std::os::raw::c_int,
        roundedRadius: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddDisk(
        xc: f64,
        yc: f64,
        zc: f64,
        rx: f64,
        ry: f64,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddPlaneSurface(
        wireTags: *mut ::std::os::raw::c_int,
        wireTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddSurfaceFilling(
        wireTag: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        pointTags: *mut ::std::os::raw::c_int,
        pointTags_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddSurfaceLoop(
        surfaceTags: *mut ::std::os::raw::c_int,
        surfaceTags_n: usize,
        tag: ::std::os::raw::c_int,
        sewing: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddVolume(
        shellTags: *mut ::std::os::raw::c_int,
        shellTags_n: usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddSphere(
        xc: f64,
        yc: f64,
        zc: f64,
        radius: f64,
        tag: ::std::os::raw::c_int,
        angle1: f64,
        angle2: f64,
        angle3: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddBox(
        x: f64,
        y: f64,
        z: f64,
        dx: f64,
        dy: f64,
        dz: f64,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddCylinder(
        x: f64,
        y: f64,
        z: f64,
        dx: f64,
        dy: f64,
        dz: f64,
        r: f64,
        tag: ::std::os::raw::c_int,
        angle: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddCone(
        x: f64,
        y: f64,
        z: f64,
        dx: f64,
        dy: f64,
        dz: f64,
        r1: f64,
        r2: f64,
        tag: ::std::os::raw::c_int,
        angle: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddWedge(
        x: f64,
        y: f64,
        z: f64,
        dx: f64,
        dy: f64,
        dz: f64,
        tag: ::std::os::raw::c_int,
        ltx: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddTorus(
        x: f64,
        y: f64,
        z: f64,
        r1: f64,
        r2: f64,
        tag: ::std::os::raw::c_int,
        angle: f64,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshModelOccAddThruSections(
        wireTags: *mut ::std::os::raw::c_int,
        wireTags_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        tag: ::std::os::raw::c_int,
        makeSolid: ::std::os::raw::c_int,
        makeRuled: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccAddThickSolid(
        volumeTag: ::std::os::raw::c_int,
        excludeSurfaceTags: *mut ::std::os::raw::c_int,
        excludeSurfaceTags_n: usize,
        offset: f64,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccExtrude(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        dx: f64,
        dy: f64,
        dz: f64,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        numElements: *mut ::std::os::raw::c_int,
        numElements_n: usize,
        heights: *mut f64,
        heights_n: usize,
        recombine: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccRevolve(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        x: f64,
        y: f64,
        z: f64,
        ax: f64,
        ay: f64,
        az: f64,
        angle: f64,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        numElements: *mut ::std::os::raw::c_int,
        numElements_n: usize,
        heights: *mut f64,
        heights_n: usize,
        recombine: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccAddPipe(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        wireTag: ::std::os::raw::c_int,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccFillet(
        volumeTags: *mut ::std::os::raw::c_int,
        volumeTags_n: usize,
        curveTags: *mut ::std::os::raw::c_int,
        curveTags_n: usize,
        radii: *mut f64,
        radii_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        removeVolume: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccChamfer(
        volumeTags: *mut ::std::os::raw::c_int,
        volumeTags_n: usize,
        curveTags: *mut ::std::os::raw::c_int,
        curveTags_n: usize,
        surfaceTags: *mut ::std::os::raw::c_int,
        surfaceTags_n: usize,
        distances: *mut f64,
        distances_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        removeVolume: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccFuse(
        objectDimTags: *mut ::std::os::raw::c_int,
        objectDimTags_n: usize,
        toolDimTags: *mut ::std::os::raw::c_int,
        toolDimTags_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        outDimTagsMap: *mut *mut *mut ::std::os::raw::c_int,
        outDimTagsMap_n: *mut *mut usize,
        outDimTagsMap_nn: *mut usize,
        tag: ::std::os::raw::c_int,
        removeObject: ::std::os::raw::c_int,
        removeTool: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccIntersect(
        objectDimTags: *mut ::std::os::raw::c_int,
        objectDimTags_n: usize,
        toolDimTags: *mut ::std::os::raw::c_int,
        toolDimTags_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        outDimTagsMap: *mut *mut *mut ::std::os::raw::c_int,
        outDimTagsMap_n: *mut *mut usize,
        outDimTagsMap_nn: *mut usize,
        tag: ::std::os::raw::c_int,
        removeObject: ::std::os::raw::c_int,
        removeTool: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccCut(
        objectDimTags: *mut ::std::os::raw::c_int,
        objectDimTags_n: usize,
        toolDimTags: *mut ::std::os::raw::c_int,
        toolDimTags_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        outDimTagsMap: *mut *mut *mut ::std::os::raw::c_int,
        outDimTagsMap_n: *mut *mut usize,
        outDimTagsMap_nn: *mut usize,
        tag: ::std::os::raw::c_int,
        removeObject: ::std::os::raw::c_int,
        removeTool: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccFragment(
        objectDimTags: *mut ::std::os::raw::c_int,
        objectDimTags_n: usize,
        toolDimTags: *mut ::std::os::raw::c_int,
        toolDimTags_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        outDimTagsMap: *mut *mut *mut ::std::os::raw::c_int,
        outDimTagsMap_n: *mut *mut usize,
        outDimTagsMap_nn: *mut usize,
        tag: ::std::os::raw::c_int,
        removeObject: ::std::os::raw::c_int,
        removeTool: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccTranslate(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        dx: f64,
        dy: f64,
        dz: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccRotate(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        x: f64,
        y: f64,
        z: f64,
        ax: f64,
        ay: f64,
        az: f64,
        angle: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccDilate(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        x: f64,
        y: f64,
        z: f64,
        a: f64,
        b: f64,
        c: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccSymmetrize(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        a: f64,
        b: f64,
        c: f64,
        d: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccAffineTransform(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        a: *mut f64,
        a_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccCopy(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccRemove(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        recursive: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccRemoveAllDuplicates(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshModelOccHealShapes(
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        tolerance: f64,
        fixDegenerated: ::std::os::raw::c_int,
        fixSmallEdges: ::std::os::raw::c_int,
        fixSmallFaces: ::std::os::raw::c_int,
        sewFaces: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccImportShapes(
        fileName: *const ::std::os::raw::c_char,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        highestDimOnly: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccImportShapesNativePointer(
        shape: *const ::std::os::raw::c_void,
        outDimTags: *mut *mut ::std::os::raw::c_int,
        outDimTags_n: *mut usize,
        highestDimOnly: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccSetMeshSize(
        dimTags: *mut ::std::os::raw::c_int,
        dimTags_n: usize,
        size: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccGetMass(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        mass: *mut f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccGetCenterOfMass(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccGetMatrixOfInertia(
        dim: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        mat: *mut *mut f64,
        mat_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshModelOccSynchronize(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshViewAdd(
        name: *const ::std::os::raw::c_char,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshViewRemove(tag: ::std::os::raw::c_int, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshViewGetIndex(
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshViewGetTags(
        tags: *mut *mut ::std::os::raw::c_int,
        tags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshViewAddModelData(
        tag: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        modelName: *const ::std::os::raw::c_char,
        dataType: *const ::std::os::raw::c_char,
        tags: *mut usize,
        tags_n: usize,
        data: *mut *const f64,
        data_n: *const usize,
        data_nn: usize,
        time: f64,
        numComponents: ::std::os::raw::c_int,
        partition: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshViewGetModelData(
        tag: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        dataType: *mut *mut ::std::os::raw::c_char,
        tags: *mut *mut usize,
        tags_n: *mut usize,
        data: *mut *mut *mut f64,
        data_n: *mut *mut usize,
        data_nn: *mut usize,
        time: *mut f64,
        numComponents: *mut ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshViewAddListData(
        tag: ::std::os::raw::c_int,
        dataType: *const ::std::os::raw::c_char,
        numEle: ::std::os::raw::c_int,
        data: *mut f64,
        data_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshViewGetListData(
        tag: ::std::os::raw::c_int,
        dataType: *mut *mut *mut ::std::os::raw::c_char,
        dataType_n: *mut usize,
        numElements: *mut *mut ::std::os::raw::c_int,
        numElements_n: *mut usize,
        data: *mut *mut *mut f64,
        data_n: *mut *mut usize,
        data_nn: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshViewAddAlias(
        refTag: ::std::os::raw::c_int,
        copyOptions: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshViewCopyOptions(
        refTag: ::std::os::raw::c_int,
        tag: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshViewCombine(
        what: *const ::std::os::raw::c_char,
        how: *const ::std::os::raw::c_char,
        remove: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshViewProbe(
        tag: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        z: f64,
        value: *mut *mut f64,
        value_n: *mut usize,
        step: ::std::os::raw::c_int,
        numComp: ::std::os::raw::c_int,
        gradient: ::std::os::raw::c_int,
        tolerance: f64,
        xElemCoord: *mut f64,
        xElemCoord_n: usize,
        yElemCoord: *mut f64,
        yElemCoord_n: usize,
        zElemCoord: *mut f64,
        zElemCoord_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshViewWrite(
        tag: ::std::os::raw::c_int,
        fileName: *const ::std::os::raw::c_char,
        append: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshPluginSetNumber(
        name: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        value: f64,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshPluginSetString(
        name: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshPluginRun(name: *const ::std::os::raw::c_char, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshGraphicsDraw(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshFltkInitialize(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshFltkWait(time: f64, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshFltkUpdate(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshFltkAwake(action: *const ::std::os::raw::c_char, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshFltkLock(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshFltkUnlock(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshFltkRun(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshFltkSelectEntities(
        dimTags: *mut *mut ::std::os::raw::c_int,
        dimTags_n: *mut usize,
        dim: ::std::os::raw::c_int,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshFltkSelectElements(
        elementTags: *mut *mut usize,
        elementTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshFltkSelectViews(
        viewTags: *mut *mut ::std::os::raw::c_int,
        viewTags_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gmshOnelabSet(
        data: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOnelabGet(
        data: *mut *mut ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOnelabSetNumber(
        name: *const ::std::os::raw::c_char,
        value: *mut f64,
        value_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOnelabSetString(
        name: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
        value_n: usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOnelabGetNumber(
        name: *const ::std::os::raw::c_char,
        value: *mut *mut f64,
        value_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOnelabGetString(
        name: *const ::std::os::raw::c_char,
        value: *mut *mut *mut ::std::os::raw::c_char,
        value_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshOnelabClear(name: *const ::std::os::raw::c_char, ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshOnelabRun(
        name: *const ::std::os::raw::c_char,
        command: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshLoggerWrite(
        message: *const ::std::os::raw::c_char,
        level: *const ::std::os::raw::c_char,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshLoggerStart(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshLoggerGet(
        log: *mut *mut *mut ::std::os::raw::c_char,
        log_n: *mut usize,
        ierr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gmshLoggerStop(ierr: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn gmshLoggerTime(ierr: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn gmshLoggerCputime(ierr: *mut ::std::os::raw::c_int) -> f64;
}
